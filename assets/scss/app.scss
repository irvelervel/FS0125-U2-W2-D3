// QUESTO é UN FILE SCSS

// FEATURES DI SCSS

// 1)
// la sintassi che potremo scrivere qui dentro è 100% retrocompatibile con CSS
header h1 {
  text-align: center;
}

body {
  background-color: #a1a2a1;
}

// 2) SELETTORI ANNIDATI / NIDIFICATI (NESTED)

// invece di...
// nav {
//   display: flex;
//   flex-direction: column;
// }

// nav ul {
//   margin: 0;
//   padding: 0;
//   list-style-type: none;
// }

// nav ul li {
//   font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
//   font-size: 0.85em;
// }

nav {
  display: flex;
  flex-direction: column;
  ul {
    margin: 0;
    padding: 0;
    list-style-type: none;
    li {
      font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
      font-size: 0.85em;
    }
  }
}

// 3) LAVORARE CON LE PSEUDOCLASSI
// invece di...
// button.primary {
//   background-color: red;
//   color: white;
// }

// button.primary:hover {
//   background-color: orange;
//   color: black;
// }

// button.secondary {
//   background-color: purple;
//   color: white;
// }

// button.secondary:hover {
//   background-color: pink;
//   color: black;
// }

button.primary {
  background-color: red;
  color: white;
  &:hover {
    background-color: orange;
    color: black;
  }
}
// & significa "selettore corrente" (o "this")

button.secondary {
  background-color: purple;
  color: white;
  &:hover {
    background-color: pink;
    color: black;
  }
}

button.tertiary {
  background-color: cyan;
  color: black;
  &:hover {
    background-color: blue;
    color: white;
  }
}
// D R Y -> don't repeat yourself!

// nav ul li {
//   text-decoration: none;
// }

// nav ul li:nth-of-type(2) {
//   text-decoration: underline;
// }

nav {
  // stili di nav
  ul {
    // stili di nav ul
    li {
      // stili di nav ul li
      text-decoration: none;
      &:nth-of-type(2) {
        // stili di nav ul li:nth-of-type(2)
        text-decoration: underline;
      }
    }
  }
}

// la "&" è un modo per riutilizzare il selettore al momento selezionato
// al fine di non doverlo riscrivere

// 4) PREFISSO COMUNE PER PROPRIETÀ "SIMILI"
// invece di...
// main #main-paragraph {
//   font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',
//     'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
//   font-weight: lighter;
//   font-size: 0.8em;
//   font-style: italic; // corsivo
// }

main #main-paragraph {
  font: {
    family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',
      'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
    weight: lighter;
    size: 0.8em;
    style: italic; // corsivo
  }
  border: {
    color: orange;
    width: 3px;
    style: dotted;
    radius: 30px;
  }
}

// 5) VARIABILI
// Le variabili in SASS servono per memorizzare dei valori.
// I valori che racchiudiamo nelle variabili possono poi essere utilizzati
// tramite il nome della variabile.

// COSA possiamo salvare in una variabile SASS? quali sono i "tipi" delle variabili?
// - valori numerici (0, 1, 100, 50px, 2.5em, etc.)
// - valori stringa ('2px solid red', '0 auto', 'hello')
// - colori (blue, orange, rgb(0, 200, 200), #f1f1f1 etc.)
// - booleani (true, false)
// - LISTE di valori (10px, 16px, 24px) --> un po' come gli array in JS
// - MAPPE di coppie chiave:valore --> un po' come gli oggetti in JS

// come si dichiara una variabile? di solito in kebab-case
$my-margin: 25px;

h1 {
  margin-top: $my-margin;
}

main p {
  margin-left: $my-margin;
}

ul li {
  margin-left: $my-margin - 10px;
  // gli operatori matematici funzionano in SASS
  // e dopo vediamo anche gli operatori LOGICI == != > < >= <=
}

$primary: rgb(90, 197, 255);
$secondary: rgb(73, 73, 73);

// 6) MIXINS
// un MIXIN è un BLOCCO di regole CSS richiamabili con un singolo nome

@mixin centered {
  display: flex;
  justify-content: center;
  align-items: center;
}

$standard-width: 200px;
$standard-height: 200px;
$standard-border: 2px solid $primary;

.box {
  width: $standard-width;
  height: $standard-height;
  border: $standard-border;
  @include centered; // mi ha portato dentro le tre proprietà sopra!
}

// è possibile "personalizzare" un mixin nella sua invocazione
@mixin custom-styles($my-background: #fff) {
  margin-top: 20px;
  border: $standard-border;
  background-color: $my-background;
}

.box-2 {
  @include centered;
  width: 150px;
  height: 150px;
  @include custom-styles(#f2f2f2);
}

// 7) INTERPOLAZIONE di stringhe/valori

// const interpolation(param) {
//  return `font-${param}`
//  return 'font-' + param
// }

// interpolation('size') -> 'font-size'

@mixin custom-font($property, $value) {
  font-#{$property}: $value;
}

.el-1 {
  @include custom-font('size', 24px);
  // font-size: 24px;
}

.el-2 {
  @include custom-font('weight', 700);
  // font-weight: 700;
}

@mixin custom-margin($property, $value) {
  margin-#{$property}: $value;
}

.el-3 {
  @include custom-margin('top', 10px);
  // margin-top: 10px;
}

.el-4 {
  @include custom-margin('right', 12px);
  // margin-right: 12px;
}

// 8) C I C L I
// in SASS è possibile utilizzare i CICLI per AUTOMATIZZARE la generazione di STILI E CLASSI

$sizes: 12px, 16px, 20px, 24px;
// ...una specie di array

@each $single-size in $sizes {
  // sto ciclando la lista $sizes
  // qui dentro ci entro 4 volte
  // $single-size alla prima iterazione è 12px, alla seconda 16px etc.
  .text-#{$single-size} {
    font-size: $single-size;
  }
}

$colors: blue, green, red, purple, orange, cyan;

@each $color in $colors {
  .bg-#{$color} {
    background-color: $color;
  }
  .text-#{$color} {
    color: $color;
  }
}

// bello! ma avere classi che si chiamano "text-12px" o "text-16px" non è il massimo
// sarebbe meglio avere tipo "text-sm", "text-lg" etc.
$sizes-map: (
  sm: 12px,
  md: 16px,
  lg: 20px,
);

@each $name, $value in $sizes-map {
  // questo ciclo verrà eseguito 3 volte
  // alla prima iterazione $name è sm e $value e 12px
  // alla prima iterazione $name è md e $value e 16px
  // alla prima iterazione $name è lg e $value e 20px
  .text-#{$name} {
    font-size: $value;
  }
}

// 9) IF / ELSE
// in SASS è possibile utilizzare delle direttive condizionali al fine di
// "prendere decisioni" sulla base di determinate condizioni, come l'esistenza
// o meno di una variabile, la comparazione di un valore etc.

@mixin generate-margin($quantity) {
  @if $quantity > 10 {
    margin: #{$quantity}px;
  } @else {
    margin: 0;
  }
}

.main-margin {
  @include generate-margin(30);
  // margin: 30px
}

.no-margin {
  @include generate-margin(0);
  // margin: 0
}

// 10) PARTIALS
// SASS ci permette di lavorare su singoli, piccoli files che possono ciascuno occuparsi
// di una porzione degli stili della nostra app. Questo rende tutta la codebase degli stili
// più organizzata, mantenibile e ordinata.

// ci spostiamo su style.scss
